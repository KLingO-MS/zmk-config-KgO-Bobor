/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_40keys.h"

#define _BASE    0
#define _NAV     1
#define _SYM     2
#define _BTF     3

&sl {
    quick-release;
    release-after-ms = <5000>;
};

/ {
// ------------------------- MACROS --------------------------------
    macros {
        muc_you: macro_uc_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp LS(Y)>
                , <&kp O>
                , <&kp U>
                ;
        };

        mlc_you: macro_lc_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp Y>
                , <&kp O>
                , <&kp U>
                ;
        };

        muc_the: macro_uc_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp LS(T)>
                , <&kp H>
                , <&kp E>
                ;
        };

        mlc_the: macro_lc_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp T>
                , <&kp H>
                , <&kp E>
                ;
        };

        mlc_are: macro_lc_are {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp A>
                , <&kp R>
                , <&kp E>
                ;
        };

        mlc_qu: macro_lc_qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp Q>
                , <&kp U>
                ;
        };

        mlc_ould: macro_lc_ould {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp O>
                , <&kp U>
                , <&kp L>
                , <&kp D>
                ;
        };

    };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        combo_BOOT {
            timeout-ms = <50>;
            key-positions = <RH2 RH3 RH4>;
            bindings = <&bootloader>;
        };

// ------------------------- UTILITY COMBOS --------------------------------
        combo_LOGON {
            timeout-ms = <50>;
            key-positions = <LH2 LH3 LH4>;
            bindings = <&kp LC(LA(DEL))>;
        };

// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LT1 RT1>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <200>;
            layers = <_BASE>;
        };

        // combo_RALTL {
        //     timeout-ms = <40>;
        //     key-positions = <LMP LTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

        // combo_RALTR {
        //     timeout-ms = <40>;
        //     key-positions = <LMP RTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

// ------------------------- CHARACTER COMBOS --------------------------------
        combo_OULD {
            timeout-ms = <50>;
            key-positions = <RTI RTM RTR>;
            bindings = <&mlc_ould>;
            layers = <_BASE>;
        };

        combo_ARE {
            timeout-ms = <50>;
            key-positions = <LTI LTM LTR>;
            bindings = <&mlc_are>;
            layers = <_BASE>;
        };

        combo_YOU {
            timeout-ms = <50>;
            key-positions = <RMI RMM RMR>;
            bindings = <&mm_you>;
            layers = <_BASE>;
        };

        combo_THE {
            timeout-ms = <50>;
            key-positions = <LMI LMM LMR>;
            bindings = <&mm_the>;
            layers = <_BASE>;
        };

        combo_QU {
            timeout-ms = <50>;
            key-positions = <RBM RBR>;
            bindings = <&mlc_qu>;
            layers = <_BASE>;
        };

    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        win_cp: win_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };

        mac_cp: mac_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        // hml: hrm_left {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <300>;
        //     quick-tap-ms = <170>;                // repeat on tap-into-hold
        //     require-prior-idle-ms = <170>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <KEYS_R THUMBS>;
        //     // hold-trigger-on-release;             // delay positional check until key-release
        // };

        // /* right-hand HRMs */
        // hmr: hrm_right {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <300>;
        //     quick-tap-ms = <170>;                // repeat on tap-into-hold
        //     require-prior-idle-ms = <170>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     // hold-trigger-on-release;             // delay positional check until key-release
        // };

        hsl: hrs_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            // hold-trigger-on-release;             // delay positional check until key-release
        };

        hsr: hrs_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            // hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        lht: layer-hold-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&to>;
        };
// ------------------------- MOD-MORPHS --------------------------------
        // com_sem: comma_semicolon {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp COMMA>, <&kp SEMI>;
        //     mods = <(MOD_LSFT)>;
        // };

        // dot_col: dot_colon {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp DOT>, <&kp COLON>;
        //     mods = <(MOD_LSFT)>;
        // };

        mm_you: mm_you {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mlc_you>, <&muc_you>;
            mods = <(MOD_LSFT)>;
        };

        mm_the: mm_the {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mlc_the>, <&muc_the>;
            mods = <(MOD_LSFT)>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
                    display-name = "Alpha";
// -------------------------------            -------------------------------
// |  B  |  C  |  P  |  L  |  W  |            |  F  |  D  |  O  |  U  |  Y  |
// |  N  |  S  |  T  |  R  |  J  |            |  G  |  H  |  A  |  E  |  I  |
// | wCP |  Z  |  V  |  M  |  <  |            |  >  |  K  |  Q  |  X  | mCP |
// | Alt | Ctl | Gui | _SYM(BSPC) | Sft |  RET |_NAV(SPC) |_NAV |_BTF |_SYM |
                        bindings = <
   &kp B    &kp C     &kp P    &kp L        &kp W           &kp F     &kp D        &kp O    &kp U    &kp Y
   &kp N    &kp S     &kp T    &hsl LSHFT R &kp J           &kp G     &hsr LSHFT H &kp A    &kp E    &kp I 
   &win_cp  &kp Z     &kp V    &kp M        &kp LT          &kp GT    &kp K        &kp Q    &kp X    &mac_cp
   &kp LALT &kp LCTRL &kp LGUI &bst _SYM BSPC &kp LSHFT     &kp RET &spt _NAV SPACE &lht _NAV _NAV &lht _BTF _BTF &lht _SYM _SYM
                        >;
                };

                nav_layer {
                    display-name = "Num Nav";
// -------------------------------       ----------------------------------
// | . , |  4  |  5  |  6  | INS |       | pUP | HOME |  UP  | END  | ESC |
// |  0  |  1  |  2  |  3  | PSC |       | pDN | LEFT | SPC  | RGHT | RET |
// |  v. |  7  |  8  |  9  |  v- |       |  v+ | TAB  | DOWN | DEL  | APP |
// | Alt | Ctl | Gui | _SYM(BSPC) | LSFT | RET | LSFT |  _B  | _BTF |_SYM |
                        bindings = <
   &kp KP_DOT &kp N4    &kp N5   &kp N6    &kp INS         &kp PG_UP    &kp HOME  &kp UP    &kp END   &kp ESC
   &kp N0     &kp N1    &kp N2   &kp N3    &kp PSCRN       &kp PG_DN    &kp LEFT  &kp SPACE &kp RIGHT &kp RET
   &kp C_MUTE &kp N7    &kp N8   &kp N9    &kp C_VOL_DN    &kp C_VOL_UP &kp TAB   &kp DOWN  &kp DEL   &kp K_APP
   &kp LALT   &kp LCTRL &kp LGUI &bst _SYM BSPC &kp LSHFT  &kp RET      &kp LSHFT &to _BASE &lht _BTF _BTF &lht _SYM _SYM
                        >;
                };
                
                sym_layer {
                    display-name = "Symbol";
// -------------------------------       -------------------------------
// |  \  |  |  |  _  |  =  |  {  |       |  }  |  "  |  ;  |  :  |  !  |
// |  /  |  *  |  -  |  +  |  (  |       |  )  |  '  |  ,  |  .  |  ?  |
// |  `  |  &  |  ^  |  %  |  [  |       |  ]  |  @  |  #  |  $  |  ~  |
// | Alt | Ctl | Gui | BSPC | LSFT | RET | _NAV(SPC) |_NAV |_BTF | _B  |
                        bindings = <
   &kp BSLH  &kp PIPE  &kp UNDER &kp EQUAL &kp LBRC         &kp RBRC &kp DQT &kp SEMI  &kp COLON &kp EXCL
   &kp SLASH &kp STAR  &kp MINUS &kp PLUS  &kp LPAR         &kp RPAR &kp SQT &kp COMMA &kp DOT   &kp QMARK
   &kp GRAVE &kp AMPS  &kp CARET &kp PRCNT &kp LBKT         &kp RBKT &kp AT  &kp HASH  &kp DLLR  &kp TILDE
   &kp LALT  &kp LCTRL &kp LGUI  &kp BSPC  &kp LSHFT &kp RET &spt _NAV SPACE &lht _NAV _NAV &lht _BTF _BTF &to _BASE
                        >;
                };

                btf_layer {
                    display-name = "Func BT";
// -------------------------------     -------------------------------
// | BT1 | BT2 | BT3 | BT4 | BT5 |     | F1 | F2  | F3  | F4  | F5  |     
// | Alt | Ctl | Gui | Sft | USB |     | F6 | F7  | F8  | F9  | F10 |
// |     |     |     |     |     |     |    | F11 | F12 |     |     |
// |     |     | CLR |     |        |       |     |_NAV | _B  |_SYM |
                        bindings = <
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &kp F1  &kp F2  &kp F3   &kp F4  &kp F5
   &kp LALT     &kp LCTRL    &kp LGUI     &kp LSHFT    &out OUT_TOG    &kp F6  &kp F7  &kp F8   &kp F9  &kp F10
   &none        &none        &none        &none        &none           &none   &kp F11 &kp F12  &none   &none
   &none        &none        &bt BT_CLR   &none        &none           &none   &none  &lht _NAV _NAV &to _BASE &lht _SYM _SYM
                        >;
                };                
    };
};
